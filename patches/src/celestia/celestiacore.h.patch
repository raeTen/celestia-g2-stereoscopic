--- src/celestia/celestiacore.h	2016-10-11 12:54:44.000000000 +0200
+++ src/celestia/celestiacore.h.stereo	2015-06-20 14:45:11.000000000 +0200
@@ -81,8 +81,76 @@
 };
 
 
+///------------------------------------------------
+class Stereo
+{
+ public:
+    enum pMode {
+        none            = 0,
+        anaglpyh        = 1,
+        shutter         = 2 ,
+        shutter_i       = 3,
+        sidebyside_c    = 4,
+        OFF             = 5,
+        sidebyside_p    = 6,
+        aboveunder      = 7,
+        whatever        = 8
+        };
+    enum valIndex {
+        depth           = 0,
+        backplaneRelief = 1,
+        frontplane      = 2,
+        foobar          = 3
+    };
+    enum flagIndex {
+        inverted   = 0,
+        simplesettings  = 1,
+        uirighteye        = 2
+    };
+    Stereo(int);
+    ~Stereo();
+    void init();
+    void setStereoVal(int q_index,int q_value);
+    int getStereoVal(int q_index);
+    void setStereoFlag(int q_index, bool q_checked);
+    void printVals();
+    int getMode();
+    void setMode();
+    void setMode(int mode);
+
+ public:
+    bool uiVisible;
+    bool changed;
+    int mode;
+    int uiVals[4];
+    int uiFlags[3];
+    static const int maxDepth = 99;
+    static const float DepthFactor = 0.000290f;
+    float fdepth;
+    float s_stereoDepth; //sterepDepth uival*factor
+    ///float FrontPlaneDepthv= 0.0f;
+    ///static const int BackPlaneRelief = 8
+    bool rightEye;
+    signed int allinverted;
+//NOTE s
+/* "fdepth" represents eyes gap (~cm) depending on distance to near plane
+ which is not really based on scientific formular but a good experience value.
+ A scientific factor is much overkill cause it depends on human eye gap,distant to screen,
+ screen(s) size and also virtual distances within in the sim,*/
+/*
+The complete 'frustum' (culled retangular) looks like a shorted hourglass (see cel_frustum.png), which doesn't
+matter on non-stereo projection, and due to the real big distances (we also could not resolve depth information
+by looking into star sky), it doesn't disturb while being in "near" situations
+It matters on fast journeys and travelling through deep space.
+So we need to figure out, _when_ to toggle right/left rendering process, maybe on
+"speed" and nearest objects, for back plane(s) which become front plane.
+
+*/
+};
+///------------------------------------------------
 class CelestiaCore // : public Watchable<CelestiaCore>
 {
+
  public:
     enum {
         LeftButton   = 0x01,
@@ -235,9 +303,15 @@
     void joystickAxis(int axis, float amount);
     void joystickButton(int button, bool down);
     void resize(GLsizei w, GLsizei h);
+
     void draw();
     void tick();
 
+    //stereo rendering
+    Stereo* stereo;
+    void celDynamicStereoValues();
+    void celStereoChanged();
+
     Simulation* getSimulation() const;
     Renderer* getRenderer() const;
     void showText(std::string s,
@@ -391,9 +465,8 @@
     bool showConsole;
     bool lightTravelFlag;
     double flashFrameStart;
-
     Timer* timer;
-
+    
     Execution* runningScript;
     ExecutionEnvironment* execEnv;
 
@@ -466,12 +539,14 @@
     Selection lastSelection;
     string selectionNames;
 
+    
 #ifdef CELX
     friend View* getViewByObserver(CelestiaCore*, Observer*);
     friend void getObservers(CelestiaCore*, std::vector<Observer*>&);
     friend TextureFont* getFont(CelestiaCore*);
     friend TextureFont* getTitleFont(CelestiaCore*);
 #endif
+
 };
 
 #endif // _CELESTIACORE_H_
